// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'env_tokens.dart';

// **************************************************************************
// SecureDotEnvAnnotationGenerator
// **************************************************************************

class _$Env extends Env {
  const _$Env(this._encryptionKey, this._iv) : super._();

  final String _encryptionKey;
  final String _iv;
  static final Uint8List _encryptedValues = Uint8List.fromList([
    167,
    12,
    20,
    29,
    158,
    9,
    54,
    97,
    168,
    211,
    166,
    140,
    247,
    71,
    99,
    229,
    48,
    83,
    20,
    0,
    217,
    178,
    190,
    125,
    106,
    22,
    178,
    40,
    231,
    227,
    57,
    114,
    233,
    235,
    178,
    240,
    61,
    171,
    30,
    247,
    212,
    164,
    229,
    155,
    119,
    77,
    119,
    234,
    15,
    148,
    94,
    75,
    58,
    70,
    191,
    14,
    22,
    110,
    162,
    0,
    4,
    217,
    27,
    57,
    119,
    235,
    25,
    91,
    122,
    103,
    194,
    196,
    77,
    128,
    231,
    226,
    154,
    175,
    142,
    39,
    91,
    119,
    5,
    52,
    181,
    47,
    210,
    88,
    84,
    140,
    27,
    223,
    54,
    68,
    77,
    6,
    100,
    147,
    158,
    135,
    212,
    227,
    221,
    32,
    2,
    61,
    27,
    68,
    88,
    151,
    167,
    79,
    157,
    200,
    151,
    154,
    179,
    251,
    5,
    212,
    17,
    170,
    57,
    131,
    118,
    232,
    234,
    78,
    3,
    127,
    195,
    18,
    56,
    117,
    55,
    244,
    232,
    94,
    238,
    7,
    16,
    88,
    3,
    158,
    32,
    118,
    194,
    110,
    254,
    169,
    37,
    86,
    47,
    139,
    93,
    53,
    136,
    212,
    225,
    27,
    91,
    162,
    43,
    238,
    194,
    101,
    31,
    142,
    228,
    40,
    241,
    19,
    174,
    73,
    208,
    89,
    83,
    72,
    16,
    192,
    27,
    19,
    139,
    67,
    14,
    138,
    84,
    203,
    20,
    111,
    205,
    104,
    46,
    161,
    77,
    130,
    151,
    141,
    223,
    76,
    40,
    41,
    132,
    181,
    174,
    130,
    68,
    40,
    138,
    52,
    252,
    191,
    255,
    215,
    210,
    72,
    22,
    150,
    68,
    50,
    224,
    159,
    146,
    0,
    17,
    171,
    178,
    196,
    23,
    8,
    48,
    152,
    35,
    161,
    3,
    254,
    206,
    251,
    86,
    211,
    249,
    97,
    81,
    214,
    34,
    180,
    174,
    253,
    106,
    72,
    234,
    9,
    82,
    197,
    95,
    121,
    31,
    217,
    4,
    81,
    252,
    30,
    234,
    53,
    64,
    69,
    146,
    48,
    92,
    139,
    155,
    131,
    194,
    126,
    57,
    74,
    28,
    125,
    182,
    187,
    55,
    162,
    12,
    41,
    158,
    148,
    145,
    27,
    20,
    28,
    250,
    13,
    78,
    174,
    151,
    23,
    98,
    98,
    208,
    168,
    255,
    179,
    181,
    71,
    161,
    137,
    70,
    76,
    148,
    197,
    50,
    66,
    191,
    242,
    200,
    195,
    7,
    49,
    110,
    230,
    12,
    65,
    33,
    126,
    226,
    53,
    57,
    7,
    58,
    1,
    27,
    216,
    72,
    8,
    238,
    193,
    77,
    60,
    65,
    163,
    118,
    141,
    53,
    82,
    90,
    85,
    249,
    134,
    219,
    150,
    103,
    118,
    108,
    79,
    74,
    215,
    92,
    184,
    176,
    210,
    165,
    241,
    221,
    148,
    14,
    138,
    200,
    36,
    215,
    101,
    246,
    30,
    52,
    186,
    198,
    79,
    16,
    135,
    42,
    85,
    27,
    223,
    150,
    156,
    94,
    69,
    3,
    147,
    67,
    101,
    33,
    216,
    211,
    143,
    126,
    198,
    195,
    108,
    109,
    100,
    176,
    13,
    223,
    1,
    186,
    53,
    131,
    4,
    148,
    161,
    151,
    151,
    89,
    23,
    210,
    117,
    22,
    153,
    162,
    134,
    62,
    118,
    95,
    187,
    233,
    250,
    150,
    73,
    116,
    203,
    238,
    225,
    67,
    113,
    161,
    228,
    78,
    45,
    139,
    244,
    223,
    169,
    133,
    236,
    120,
    166,
    70,
    90,
    179,
    99,
    61,
    91,
    121,
    209,
    1,
    248,
    106,
    193,
    149,
    198,
    68,
    168,
    45,
    129,
    208,
    70,
    12,
    45,
    229,
    61,
    242,
    229,
    28,
    51,
    53,
    246,
    246,
    109,
    198,
    212,
    73,
    71,
    172,
    166,
    98,
    250,
    118,
    226,
    237,
    98,
    99,
    92,
    122,
    45,
    131,
    140,
    3,
    177,
    82,
    116,
    86,
    69,
    183,
    34,
    249,
    218,
    29,
    125,
    211,
    132,
    154,
    130
  ]);
  @override
  String get mapboxAccessToken => _get('MAPBOX_ACCESS_TOKEN');

  @override
  String get trailblazeAppToken => _get('TRAILBLAZE_APP_TOKEN');

  @override
  String get auth0Scheme => _get('AUTH0_SCHEME');

  @override
  String get auth0Domain => _get('AUTH0_DOMAIN');

  @override
  String get auth0ClientId => _get('AUTH0_CLIENT_ID');

  T _get<T>(
    String key, {
    T Function(String)? fromString,
  }) {
    T _parseValue(String strValue) {
      if (T == String) {
        return (strValue) as T;
      } else if (T == int) {
        return int.parse(strValue) as T;
      } else if (T == double) {
        return double.parse(strValue) as T;
      } else if (T == bool) {
        return (strValue.toLowerCase() == 'true') as T;
      } else if (T == Enum || fromString != null) {
        if (fromString == null) {
          throw Exception('fromString is required for Enum');
        }

        return fromString(strValue.split('.').last);
      }

      throw Exception('Type ${T.toString()} not supported');
    }

    final encryptionKey = base64.decode(_encryptionKey.trim());
    final iv = base64.decode(_iv.trim());
    final decrypted =
        AESCBCEncryper.aesCbcDecrypt(encryptionKey, iv, _encryptedValues);
    final jsonMap = json.decode(decrypted) as Map<String, dynamic>;
    if (!jsonMap.containsKey(key)) {
      throw Exception('Key $key not found in .env file');
    }

    final encryptedValue = jsonMap[key] as String;
    final decryptedValue = AESCBCEncryper.aesCbcDecrypt(
      encryptionKey,
      iv,
      base64.decode(encryptedValue),
    );
    return _parseValue(decryptedValue);
  }
}
